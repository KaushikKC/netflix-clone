{"version":3,"sources":["Nav.js","axios.js","Request.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","features/counter/userSlice.js","screens/SignupScreen.js","screens/LoginScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","orginal_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","event","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aeda50e4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"./Nav.css\"\r\nimport { useHistory } from \"react-router\";\r\n\r\nfunction Nav() {\r\n  const [show,handleShow] = useState(false);\r\n  const history = useHistory();\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true)\r\n    } else {\r\n      handleShow(false)\r\n    }\r\n  }\r\n\r\n  useEffect (() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () => window.removeEventListener(\"scroll\",transitionNavBar);\r\n  }, []);\r\n  return <div className={`nav ${show && \"nav_black\"}`}>\r\n      <div className=\"nav_contents\">\r\n        <img\r\n            onClick={() => history.push(\"/\")} \r\n            className='nav_logo'\r\n            src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n            alt=\"\" \r\n        />\r\n        <img\r\n            onClick={() => history.push(\"/profile\")}\r\n            className='nav_avatar' \r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"  \r\n            alt=\"\" \r\n        />\r\n      </div>\r\n      \r\n      \r\n  </div>;\r\n}\r\n\r\nexport default Nav;\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\"\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = \"cbf45b03ce3033a1b340974c720411c4\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/day?api_key=${API_KEY}`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie/?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react';\r\nimport \"./Banner.css\"\r\nimport axios from './axios'\r\nimport requests from './Request';\r\n\r\nfunction Banner() {\r\n\r\n    const[movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results [\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    function truncate(string,n) {\r\n        return string?.length > n ? string.substr(0, n-1) + ' ....' : string;\r\n    }\r\n  return (\r\n    <header \r\n        className='banner' \r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\",\r\n        }}\r\n    >\r\n        <div className=\"banner__contents\">\r\n            <h1 className='banner__title'>{movie?.title || movie?.name || movie?.orginal_name}</h1>\r\n            <div className=\"banner__buttons\">\r\n                <button className='banner__button'>Play</button>\r\n                <button className='banner__button'>My List</button>\r\n            </div>\r\n            <h1 className='banner__description'>\r\n                {truncate(movie?.overview,150)}\r\n            </h1>\r\n        </div>\r\n\r\n        <div className=\"banner__fadeBottom\"/>    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Row.css\"\r\nimport axios from './axios'\r\n\r\nfunction Row({title, fetchUrl, isLargeRow = false}) {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        };\r\n        fetchData();\r\n    },[fetchUrl]);\r\n\r\n\r\n\r\n  return (\r\n    <div className='row'>\r\n        <h2>{title}</h2>\r\n\r\n        <div className=\"row__posters\">\r\n            {movies.map(\r\n                (movie) => \r\n                ((isLargeRow && movie.poster_path) || \r\n                (!isLargeRow && movie.backdrop_path)) && (\r\n                <img \r\n                    className={`row__poster ${isLargeRow && 'row__posterLarge'}`} \r\n                    key={movie.id}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                    alt=\"{movie.name}\" \r\n                />\r\n                )\r\n            )}\r\n        </div>\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport \"./HomeScreen.css\";\r\nimport Nav from '../Nav';\r\nimport Banner from '../Banner';\r\nimport requests from '../Request';\r\nimport Row from '../Row';\r\n\r\nfunction HomeScreen() {\r\n  return <div className='homeScreen'>\r\n      <Nav />\r\n\r\n      <Banner />\r\n\r\n      <Row\r\n        title='NETFLIX ORGINALS'\r\n        fetchUrl= {requests.fetchNetflixOriginals} \r\n        isLargeRow\r\n      />\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} isLargeRow />\r\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} isLargeRow />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n      <Row title=\"Romance\" fetchUrl={requests.fetchRomanticMovies} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n  </div>;\r\n}\r\n\r\nexport default HomeScreen;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBu_-xrJVauNg0gFNSB4ky4aUivtuDvLwA\",\r\n    authDomain: \"netflix-clone-efcd3.firebaseapp.com\",\r\n    projectId: \"netflix-clone-efcd3\",\r\n    storageBucket: \"netflix-clone-efcd3.appspot.com\",\r\n    messagingSenderId: \"99107609129\",\r\n    appId: \"1:99107609129:web:58735e81296bee5cd4da38\"\r\n  };\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\n// const ref = collection(db, 'posts')\r\n\r\nexport {auth}\r\nexport default db;\r\n\r\n\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import React, { useRef } from 'react';\r\nimport { auth } from '../firebase';\r\n\r\nimport \"./SignupScreen.css\"\r\n\r\nfunction SignupScreen() {\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const register = (event) => {\r\n        event.preventDefault();\r\n        auth\r\n          .createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n          )\r\n          .then((authUser) => {\r\n            console.log(authUser);\r\n          })\r\n          .catch((error) => {\r\n            alert(error.message);\r\n          });\r\n      };\r\n\r\n      const signIn = (event) => {\r\n        event.preventDefault();\r\n        auth\r\n          .signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n          )\r\n          .then((authUser) => {\r\n            console.log(authUser);\r\n          })\r\n          .catch((error) => {\r\n            alert(error.message);\r\n          });\r\n      };\r\n  return ( <div className='signupScreen'>\r\n      <form>\r\n          <h1>Sign In</h1>\r\n          <input ref={emailRef} type=\"email\" placeholder='Email' />\r\n          <input ref={passwordRef} type=\"password\" placeholder='Password' />\r\n          <button onClick={signIn} type='submit'>Sign In</button>\r\n          <h4>\r\n              <span className='signupScreen__grey'>New to netflix?</span>\r\n               <span className='signupScreen__link' onClick={register}>Sign Up now</span> \r\n          </h4>\r\n      </form>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default SignupScreen;\r\n","import React, { useState } from 'react';\r\nimport \"./LoginScreen.css\"\r\nimport SignupScreen from './SignupScreen';\r\n\r\nfunction LoginScreen() {\r\n\r\n    const [signIn, setSignIn] = useState(false);\r\n  return ( \r\n  <div className='loginscreen'>\r\n      <div className=\"loginScreen__Background\">\r\n          <img \r\n            className='loginScreen__logo'\r\n            src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n            alt=\"\" \r\n          />\r\n          <button onClick={() => setSignIn(true)} \r\n          className='loginScreen__button'>\r\n              Sign In \r\n          </button>\r\n\r\n          <div className=\"loginScreen__gradient\"/>\r\n      </div>\r\n\r\n      <div className=\"loginScreen__body\">\r\n          {signIn ? (\r\n              <SignupScreen />\r\n          ) : (\r\n          <>\r\n            <h1>Unlimited movies, TV shows and more.</h1>\r\n            <h2>Watch anywhere. Cancel at any time</h2>\r\n            <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n\r\n            <div className=\"loginScreen__input\">\r\n                <form>\r\n                    <input type=\"email\" placeholder='Email Address' />\r\n                    <button onClick={() => setSignIn(true)} \r\n                    className='loginScreen__getStarted'>GET STARTED</button>\r\n                </form>\r\n            </div>\r\n          </>\r\n          )}\r\n      </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/counter/userSlice\";\r\nimport { auth } from \"../firebase\";\r\nimport Navbar from \"../Nav\";\r\nimport \"./ProfileScreen.css\";\r\n\r\nconst ProfileScreen = () => {\r\n  const user = useSelector(selectUser);\r\n  return (\r\n    <div className=\"profileScreen\">\r\n      <Navbar />\r\n      <div className=\"profileScreen__body\">\r\n        <h1>Edit profile</h1>\r\n        <div className=\"profileScreen__info\">\r\n          <img\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n            alt=\"avatar\"\r\n          />\r\n          <div className=\"profileScreen__details\">\r\n            <h2>{user.email}</h2>\r\n            <div className=\"profileScreen__plans\">\r\n              <h3>Plans</h3>\r\n\r\n              <button\r\n                className=\"profileScreen__signout\"\r\n                onClick={() => auth.signOut()}\r\n              >\r\n                Sign Out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;","import React from 'react';\nimport HomeScreen from './screens/HomeScreen';\nimport './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Switch } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\nimport { useEffect } from \"react\";\nimport { auth } from \"./firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, selectUser } from \"./features/counter/userSlice\";\nimport LoginScreen from './screens/LoginScreen';\nimport ProfileScreen from \"./screens/ProfileScreen\";\n\nfunction App() {\n  \n  const dispatch = useDispatch();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n    return unsubscribe;\n  }, [dispatch]);\n  // const user = null;\n  const user = useSelector(selectUser);\n  return (\n    <div className=\"app\">\n\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ): (\n        <Switch>\n           <Route path=\"/profile\">\n              <ProfileScreen />\n            </Route>\n          <Route exact path=\"/\">\n            <HomeScreen />\n          </Route>\n        </Switch>\n        )}\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/counter/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}